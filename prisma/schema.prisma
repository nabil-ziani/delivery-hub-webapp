generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model Organization {
  id                String               @id @default(uuid())
  name              String
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  members           OrganizationMember[]
  restaurantProfile RestaurantProfile?
  InviteToken       InviteToken[]

  @@map("organizations")
  @@schema("public")
}

model OrganizationMember {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id") @db.Uuid
  role           MemberRole
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, userId])
  @@map("organization_members")
  @@schema("public")
}

model RestaurantProfile {
  id             String       @id @default(uuid())
  organizationId String       @unique @map("organization_id")
  phoneNumber    String       @map("phone_number")
  email          String
  address        String
  city           String
  postalCode     String       @map("postal_code")
  latitude       Float?
  longitude      Float?
  settings       Json?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("restaurant_profiles")
  @@schema("public")
}

model InviteToken {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  email          String
  role           MemberRole
  expiresAt      DateTime     @map("expires_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("invite_tokens")
  @@schema("public")
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("password_resets")
  @@schema("public")
}

enum MemberRole {
  owner
  courier

  @@schema("public")
}

model Delivery {
  id                      String      @id @default(uuid())
  external_id             String      @unique // ID from external platform (Takeaway, UberEats, etc)
  platform                String // 'TAKEAWAY', 'UBEREATS', 'DELIVEROO'
  restaurant_id           String
  status                  String // 'PENDING', 'ASSIGNED', 'PICKED_UP', 'DELIVERED', 'CANCELLED'
  customer_name           String
  customer_phone          String
  address                 String
  lat                     Float?
  lng                     Float?
  items                   Json // Array of order items
  total                   Float
  courier_id              String? // Optional until assigned
  estimated_delivery_time String?
  raw_data                Json // Complete raw order data from platform
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  User                    User?       @relation(fields: [userId], references: [id])
  userId                  String?
  Restaurant              Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId            String?

  @@index([platform, status])
  @@index([restaurant_id])
  @@map("deliveries")
  @@schema("public")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  role       String // "OWNER", "COURIER", "ADMIN"
  deliveries Delivery[]
  restaurant Restaurant?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@schema("public")
}

model Restaurant {
  id         String                                @id @default(cuid())
  name       String
  address    String
  location   Unsupported("geography(Point, 4326)")
  ownerId    String                                @unique
  owner      User                                  @relation(fields: [ownerId], references: [id])
  deliveries Delivery[]
  createdAt  DateTime                              @default(now())
  updatedAt  DateTime                              @updatedAt

  @@index([location], name: "restaurant_location_idx", type: Gist)
  @@schema("public")
}
